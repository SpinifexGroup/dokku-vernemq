#!/usr/bin/env bash
source "$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)/config"
set -eo pipefail; [[ $DOKKU_TRACE ]] && set -x
source "$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)/common-functions"
source "$PLUGIN_BASE_PATH/common/functions"
source "$PLUGIN_AVAILABLE_PATH/config/functions"
if [[ -f "$PLUGIN_AVAILABLE_PATH/docker-options/functions" ]]; then
  source "$PLUGIN_AVAILABLE_PATH/docker-options/functions"
fi

# non-generic functions

service_add_user() {
  local SERVICE="$1"
  local USER="$2"
  local PASSWORD="$3"
  local SERVICE_NAME="$(get_service_name "$SERVICE")"
  [[ -z "$SERVICE" ]] && dokku_log_fail "Please specify a service"
  [[ -z "$USER" ]] && dokku_log_fail "Please specify a username"
  [[ -z "$PASSWORD" ]] && dokku_log_fail "Please specify a password"

  [[ -n $SSH_TTY ]] && stty -opost
  docker exec -i "$SERVICE_NAME" vmq-passwd /etc/vernemq/vmq.passwd "$USER" <<EOF
$PASSWORD
$PASSWORD
EOF
  status=$?
  [[ -n $SSH_TTY ]] && stty opost
  if [ $status -eq 0 ]
    then
      dokku_log_info2 echo "User $USER created"
    else
      dokku_log_info2 echo "Could not create file" >&2
  fi
  exit $status
}

service_create() {
  local SERVICE="$1"
  [[ -z "$SERVICE" ]] && dokku_log_fail "Please specify a name for the service"
  [[ ! -d "$PLUGIN_DATA_ROOT/$SERVICE" ]] || dokku_log_fail "$PLUGIN_SERVICE service $SERVICE already exists"
  SERVICE_ROOT="$PLUGIN_DATA_ROOT/$SERVICE"; LINKS_FILE="$SERVICE_ROOT/LINKS"

  service_parse_args "${@:2}"

  if ! docker images | grep -e "^$PLUGIN_IMAGE " | grep -q " $PLUGIN_IMAGE_VERSION " ; then
    docker pull "$PLUGIN_IMAGE:$PLUGIN_IMAGE_VERSION" || dokku_log_fail "$PLUGIN_SERVICE image $PLUGIN_IMAGE:$PLUGIN_IMAGE_VERSION pull failed"
  fi

  mkdir -p "$SERVICE_ROOT" || dokku_log_fail "Unable to create service directory"
  mkdir -p "$SERVICE_ROOT/data" || dokku_log_fail "Unable to create service data directory"
  mkdir -p "$SERVICE_ROOT/config" || dokku_log_fail "Unable to create service config directory"
  touch "$LINKS_FILE"
  PASSWORD=$(openssl rand -hex 16)
  USER=$(openssl rand -hex 16)
  if [[ -n "$SERVICE_PASSWORD" ]]; then
    PASSWORD="$SERVICE_PASSWORD"
    dokku_log_warn "Specified password may not be as secure as the auto-generated password"
  fi
  echo "$PASSWORD" > "$SERVICE_ROOT/PASSWORD"
  chmod 640 "$SERVICE_ROOT/PASSWORD"
  echo "$USER" > "$SERVICE_ROOT/USER"
  chmod 640 "$SERVICE_ROOT/USER"

  if [[ -n $VERNEMQ_CUSTOM_ENV ]]; then
    echo "$VERNEMQ_CUSTOM_ENV" | tr ';' "\n" > "$SERVICE_ROOT/ENV"
  else
    echo "" > "$SERVICE_ROOT/ENV"
  fi
  service_create_container "$SERVICE"
}

service_create_container() {
  local SERVICE="$1"
  local SERVICE_ROOT="$PLUGIN_DATA_ROOT/$SERVICE"
  local SERVICE_NAME="$(get_service_name "$SERVICE")"
  local SERVICE_TEMPLATE_NAME="$SERVICE_NAME"
  SERVICE_TEMPLATE_NAME+="_TEMPLATE"
  local PASSWORD="$(cat "$SERVICE_ROOT/PASSWORD")"
  local USER="$(cat "$SERVICE_ROOT/USER")"

  # Add random user/password to environment, and let the docker image handle the
  # user creation
  echo "DOCKER_VERNEMQ_USER_$USER=$PASSWORD" >> "$SERVICE_ROOT/ENV"

  # Start a throwaway container. The point here is to let the container create
  # the config file, and then put it into the host mount. This will allow us to
  # spin up the REAL container with the config
  docker run --name "$SERVICE_TEMPLATE_NAME" -d --env-file="$SERVICE_ROOT/ENV" "$PLUGIN_IMAGE:$PLUGIN_IMAGE_VERSION"
  docker cp $SERVICE_TEMPLATE_NAME:/etc/vernemq/. $SERVICE_ROOT/config
  docker rm --force "$SERVICE_TEMPLATE_NAME"

  ID=$(docker run --name "$SERVICE_NAME" -d --restart always -v "$SERVICE_ROOT/data:/var/lib/vernemq" -v "$SERVICE_ROOT/config:/etc/vernemq" --env-file="$SERVICE_ROOT/ENV" --label dokku=service --label dokku.service=vernemq "$PLUGIN_IMAGE:$PLUGIN_IMAGE_VERSION")
  echo "$ID" > "$SERVICE_ROOT/ID"

  dokku_log_verbose_quiet "Waiting for container to be ready"
  docker run --rm --link "$SERVICE_NAME:$PLUGIN_COMMAND_PREFIX" dokkupaas/wait:0.2 -p "$PLUGIN_DATASTORE_WAIT_PORT" > /dev/null

  dokku_log_info2 "$PLUGIN_SERVICE container created: $SERVICE"
  service_info "$SERVICE"
}

service_start() {
  local SERVICE="$1"
  local QUIET="$2"
  local SERVICE_ROOT="$PLUGIN_DATA_ROOT/$SERVICE"
  local SERVICE_NAME="$(get_service_name "$SERVICE")"
  local ID=$(docker ps -f status=running | grep -e "$SERVICE_NAME$" | awk '{print $1}') || true
  if [[ -n $ID ]]; then
    [[ -z $QUIET ]] && dokku_log_warn "Service is already started"
    return 0
  fi

  dokku_log_info1_quiet "Starting container"
  local PREVIOUS_ID=$(docker ps -f status=exited | grep -e "$SERVICE_NAME$" | awk '{print $1}') || true
  local IMAGE_EXISTS=$(docker images | grep -e "^$PLUGIN_IMAGE " | grep -q " $PLUGIN_IMAGE_VERSION " && true)
  local PASSWORD="$(cat "$SERVICE_ROOT/PASSWORD")"

  if [[ -n $PREVIOUS_ID ]]; then
    docker start "$PREVIOUS_ID" > /dev/null
    service_port_unpause "$SERVICE"
    dokku_log_info2 "Container started"
  elif $IMAGE_EXISTS && [[ -n "$PASSWORD" ]]; then
    service_create_container "$SERVICE"
  else
    dokku_log_verbose_quiet "Neither container nor valid configuration exists for $SERVICE"
  fi
}

service_host() {
  local SERVICE="$1"
  local SERVICE_ALIAS="$(service_alias "$SERVICE")"
  echo "$SERVICE_ALIAS"
}

service_port() {
  echo "${PLUGIN_DATASTORE_PORTS[0]}"
}

service_remove_user() {
  local SERVICE="$1"
  local USER="$2"
  local SERVICE_NAME="$(get_service_name "$SERVICE")"
  [[ -z "$SERVICE" ]] && dokku_log_fail "Please specify a service"
  [[ -z "$USER" ]] && dokku_log_fail "Please specify a username"

  [[ -n $SSH_TTY ]] && stty -opost
  docker exec -i "$SERVICE_NAME" vmq-passwd -D /etc/vernemq/vmq.passwd "$USER"
  status=$?
  [[ -n $SSH_TTY ]] && stty opost
  if [ $status -eq 0 ]
    then
      dokku_log_info2 echo "User $USER removed"
    else
      dokku_log_info2 echo "Could not remove user" >&2
  fi
  exit $status
}

service_url() {
  local SERVICE="$1"
  local SERVICE_ROOT="$PLUGIN_DATA_ROOT/$SERVICE"

  local PASSWORD="$(cat "$SERVICE_ROOT/PASSWORD")"
  local DATABASE_NAME="$(get_database_name "$SERVICE")"
  local SERVICE_ALIAS="$(service_alias "$SERVICE")"
  echo "$PLUGIN_SCHEME://postgres:$PASSWORD@$SERVICE_ALIAS:${PLUGIN_DATASTORE_PORTS[0]}/$DATABASE_NAME"
}
